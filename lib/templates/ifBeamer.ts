import type { DeckMetadata, SlideBlock, SlideContent } from '../types';

function escapeLatex(text: string): string {
  const replacements: Record<string, string> = {
    '\\': '\\textbackslash{}',
    '{': '\\{',
    '}': '\\}',
    '$': '\\$',
    '&': '\\&',
    '#': '\\#',
    '%': '\\%',
    '_': '\\_',
    '~': '\\textasciitilde{}',
    '^': '\\textasciicircum{}',
  };
  return text.replace(/([\\{}$&#%_~^])/g, (match) => replacements[match]);
}

function renderBlock(block: SlideBlock): string {
  if (block.kind === 'paragraph') {
    return `${escapeLatex(block.text)}\\par`;
  }

  if (block.kind === 'quote') {
    return [
      '\\begin{quote}',
      escapeLatex(block.text),
      '\\end{quote}',
    ].join('\n');
  }

  const items = block.items
    .filter((item) => item.trim().length > 0)
    .map((item) => `  \\item ${escapeLatex(item.trim())}`);

  if (items.length === 0) {
    items.push('  \\item (content placeholder)');
  }

  return ['\\begin{itemize}', ...items, '\\end{itemize}'].join('\n');
}

function renderFrame(slide: SlideContent): string {
  const frameLines: string[] = [
    `\\begin{frame}{${escapeLatex(slide.title)}}`,
  ];

  for (const block of slide.blocks) {
    frameLines.push(renderBlock(block));
  }

  if (slide.notes) {
    frameLines.push(`\\note{${escapeLatex(slide.notes)}}`);
  }

  frameLines.push('\\end{frame}');

  return frameLines.join('\n');
}

function titleShortener(title: string): string {
  if (title.length <= 60) {
    return title;
  }
  return `${title.slice(0, 57)}...`;
}

interface RenderInput {
  metadata: DeckMetadata;
  outline: string[];
  slides: SlideContent[];
}

export function renderIfBeamerDocument(input: RenderInput): string {
  const { metadata, outline, slides } = input;
  const docLines: string[] = [];

  const authors = metadata.authors?.trim().length
    ? metadata.authors
    : 'Automated Summary';
  const subtitle = metadata.paperSubtitle?.trim().length
    ? metadata.paperSubtitle
    : 'Generated by Paper2PPT';

  docLines.push('\n% Auto-generated by Paper2PPT');
  docLines.push('\\documentclass{if-beamer}');
  docLines.push('');
  docLines.push('\\title[' + escapeLatex(titleShortener(metadata.paperTitle)) + ']{' + `\\textbf{${escapeLatex(metadata.paperTitle)}}` + '}');
  docLines.push('\\subtitle{' + escapeLatex(subtitle) + '}');
  docLines.push('\\author[]{\\large \\negrito{' + escapeLatex(authors) + '}}');
  docLines.push('\\institute[]{');
  docLines.push('  \\small \\textit{Paper2PPT Auto-generated Deck} \\');
  docLines.push('  \\textit{https://github.com/greyyy/Paper2PPT}');
  docLines.push('}');
  docLines.push('\\date{\\today}');
  docLines.push('\\logo{');
  docLines.push('  \\includegraphics[scale=.15, clip]{figuras/logoPPGCA.png}');
  docLines.push('}');
  docLines.push('\\subject{' + escapeLatex(metadata.paperTitle) + '}');
  docLines.push('\\graphicspath{{figuras/}}');
  docLines.push('');
  docLines.push('\\begin{document}');
  docLines.push('');
  docLines.push('\\begin{frame}');
  docLines.push('  \\titlepage');
  docLines.push('\\end{frame}');
  docLines.push('');

  docLines.push('\\begin{frame}{Agenda}');
  if (outline.length > 0) {
    docLines.push('  \\begin{itemize}');
    for (const item of outline.slice(0, 8)) {
      docLines.push('    \\item ' + escapeLatex(item));
    }
    docLines.push('  \\end{itemize}');
  } else {
    docLines.push('  \\tableofcontents');
  }
  docLines.push('\\end{frame}');
  docLines.push('');

  let currentSection: string | undefined;
  for (const slide of slides) {
    if (slide.section && slide.section !== currentSection) {
      docLines.push('\\section{' + escapeLatex(slide.section) + '}');
      docLines.push('');
      currentSection = slide.section;
    }

    docLines.push(renderFrame(slide));
    docLines.push('');
  }

  docLines.push('\\end{document}\n');

  return docLines.join('\n');
}
